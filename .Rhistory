# Step three for means
ci_means <- bootstrap_ci(sorted_resample_means)
###########################Medians####################
# Step one and two for medians
#resample_medians <- replicate(resample_size, {
#sample_vec <- sample(vec, sample_size, replace = TRUE)
#median(sample_vec)
#})
# Initialize a vector to store the means
resample_medians <- numeric(1000)
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
resample_medians[i] <- median(sample_vec)
}
# Step 3: Sort the one thousand means
sorted_resample_medians <- sort(resample_medians)
# Step three for medians
ci_medians <- bootstrap_ci(sorted_resample_medians)
####################### Midranges ############################
# Step one and two for midranges
#resample_midranges <- replicate(resample_size, {
#sample_vec <- sample(vec, sample_size, replace = TRUE)
#(min(sample_vec) + max(sample_vec))/2
#})
# Initialize a vector to store the means
resample_midranges <- numeric(1000)
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
resample_midranges[i] <- (min(sample_vec) + max(sample_vec))/2
}
# Step 3: Sort the one thousand means
sorted_resample_midranges <- sort(resample_midranges)
# Step three for midranges
ci_midranges <- bootstrap_ci(sorted_resample_midranges)
####################### Geometric Meanss ############################
# Step one and two for geometric_means
#resample_geomeans <- replicate(resample_size, {
#sample_vec <- sample(vec, sample_size, replace = TRUE)
##exp(mean(log(sample_vec)))
#pro(vec)^(1/length(vec))
#})
resample_geomeans <- numeric(1000)
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
resample_geomeans[i] <- (min(vec) + max(vec))/2
}
# Step 3: Sort the one thousand means
sorted_resample_geomeans <- sort(resample_geomeans)
# Step three foHarmonic.Mean(sample_vec)r geometric_means
ci_geomeans <- bootstrap_ci(sorted_resample_geomeans)
################################ Harmonic Means ###################
# Step one and two for harmonic_means
#resample_harmeans <- replicate(resample_size, {
#sample_vec <- sample(vec, sample_size, replace = TRUE)
#length(sample_vec) / sum(1/sample_vec)
#})
resample_harmeans <- numeric(1000)
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
resample_harmeans[i] <- length(sample_vec) / sum(1/sample_vec)
}
# Step 3: Sort the one thousand means
sorted_resample_harmeans <- sort(resample_harmeans)
ci_harmeans <- bootstrap_ci(sorted_resample_harmeans)
# ################ Quardratic Means #######################
# Step one and two for quadratic means
#resample_quadmeans <- replicate(resample_size, {
#sample_vec <- sample(vec, sample_size, replace = TRUE)
#(mean(sample_vec^2))^(1/2)
#})
resample_quadmeans <- numeric(1000)
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
resample_quadmeans[i] <- (mean(sample_vec^2))^(1/2)
}
# Step 3: Sort the one thousand means
sorted_resample_quadmeans <- sort(resample_quadmeans)
ci_quadmeans <- bootstrap_ci(sorted_resample_quadmeans)
# ################ Cubic Means #######################
# Step one and two for cubicic means
#resample_cubmeans <- replicate(resample_size, {
#sample_vec <- sample(vec, sample_size, replace = TRUE)
#(mean(sample_vec^3))^(1/3)
#})
resample_cubmeans <- numeric(1000)
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
resample_cubmeans[i] <- (mean(sample_vec^3))^(1/3)
}
# Step 3: Sort the one thousand means
sorted_resample_cubmeans <- sort(resample_cubmeans)
ci_cubmeans <- bootstrap_ci(sorted_resample_cubmeans)
# ################ quartic or biquadratic Means #######################
# Step one and two for cubicic means
#resample_biquadmeans <- replicate(resample_size, {
#sample_vec <- sample(vec, sample_size, replace = TRUE)
#(mean(sample_vec^4))^(1/4)
#})
resample_biquadmeans <- numeric(1000)
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
resample_biquadmeans[i] <- (mean(sample_vec^4))^(1/4)
}
# Step 3: Sort the one thousand means
sorted_resample_biquadmeans <- sort(resample_biquadmeans)
ci_biquadmeans <- bootstrap_ci(sorted_resample_biquadmeans)
# Step five: Create a data frame with the results
results_df <- data.frame(
CI = c("mean", "median", "midranges", "geomeans", "harmeans", "quadmeans", "cubmeans", "biquadmeans"),
min_values = c(ci_means[1], ci_medians[1], ci_midranges[1], ci_geomeans[1], ci_harmeans[1], ci_quadmeans[1], ci_cubmeans[1], ci_biquadmeans[1]),
max_values = c(ci_means[2], ci_medians[2], ci_midranges[2], ci_geomeans[2], ci_harmeans[2], ci_quadmeans[2], ci_cubmeans[2], ci_biquadmeans[2])
)
return(results_df)
}
# Example usage:
vec <- c(1, 2, 3, 4, 5)
analyze_vector(vec, conf_interval = 0.95, resample_size = 1000, set_seed = 123, sample_size = length(vec))
# Repeat steps 1 and 2 one thousand times
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
means[i] <- median(sample_vec)
}
# Step 3: Sort the one thousand means
sorted_means <- sort(means)
# Print the sorted means
print(sorted_means)
## ##################################################################################
# Define the vector
vec <- c(1, 2, 3, 4, 5)
# Initialize a vector to store the means
means <- numeric(1000)
## ##################################################################################
# Define the vector
vec <- c(1, 2, 3, 4, 5)
# Initialize a vector to store the means
resample_means <- numeric(1000)
# Repeat steps 1 and 2 one thousand times
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
resample_means[i] <- median(sample_vec)
}
# Step 3: Sort the one thousand means
sorted_resample_means <- sort(resample_means)
# Print the sorted means
print(sorted_resample_means)
bootstrap_ci <- function(means_method = NULL) {
bootstrap_samples <- means_method
sorted_samples <- sort(bootstrap_samples)
lower_bound <- sorted_samples[ceiling(0.025 * length(means_method))]
upper_bound <- sorted_samples[floor(0.975 * length(means_method))]
ci <- quantile(c(lower_bound, upper_bound), probs = c(0.025, 0.975))
return(ci)
}
resample_medians <- numeric(1000)
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
resample_medians[i] <- median(sample_vec)
}
# Step 3: Sort the one thousand means
sorted_resample_medians <- sort(resample_medians)
# Step three for medians
ci_medians <- bootstrap_ci(means_method = sorted_resample_medians)
ci_medians
bootstrap_ci <- function(means_method = NULL) {
bootstrap_samples <- means_method
#sorted_samples <- sort(bootstrap_sample)
lower_bound <- bootstrap_samples[ceiling(0.025 * length(means_method))]
upper_bound <- bootstrap_samples[floor(0.975 * length(means_method))]
ci <- quantile(c(lower_bound, upper_bound), probs = c(0.025, 0.975))
return(ci)
}
resample_medians <- numeric(1000)
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
resample_medians[i] <- median(sample_vec)
}
# Step 3: Sort the one thousand means
sorted_resample_medians <- sort(resample_medians)
# Step three for medians
ci_medians <- bootstrap_ci(means_method = sorted_resample_medians)
ci_medians
bootstrap_ci <- function(mean_method) {
bootstrap_samples <- mean_method
#sorted_samples <- sort(bootstrap_samples)
lower_bound <- bootstrap_samples[ceiling(0.025 * length(bootstrap_samples))]
upper_bound <- bootstrap_samples[floor(0.975 * length(bootstrap_samples))]
ci <- c(lower_bound, upper_bound)
#ci = quantile(c(lower_bound, upper_bound), probs = c(0.025, 0.975))
return(ci)
}
resample_medians <- numeric(1000)
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
resample_medians[i] <- median(sample_vec)
}
# Step 3: Sort the one thousand means
sorted_resample_medians <- sort(resample_medians)
# Step 3: Sort the one thousand means
sorted_resample_medians <- sort(resample_medians)
# Initialize a vector to store the means
resample_means <- numeric(1000)
# Repeat steps 1 and 2 one thousand times
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
resample_means[i] <- median(sample_vec)
}
# Step 3: Sort the one thousand means
sorted_resample_means <- sort(resample_means)
# Print the sorted means
print(sorted_resample_means)
bootstrap_ci <- function(mean_method) {
sorted_means <- mean_method
#sorted_samples <- sort(bootstrap_samples)
lower_bound <- sorted_means[ceiling(0.025 * length(sorted_means))]
upper_bound <- sorted_means[floor(0.975 * length(sorted_means))]
ci <- c(lower_bound, upper_bound)
#ci = quantile(c(lower_bound, upper_bound), probs = c(0.025, 0.975))
return(ci)
}
resample_medians <- numeric(1000)
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
resample_medians[i] <- median(sample_vec)
}
# Step 3: Sort the one thousand means
sorted_resample_medians <- sort(resample_medians)
sorted_resample_means
bootstrap_ci <- function(mean_method = NULL) {
sorted_means <- mean_method
#sorted_samples <- sort(bootstrap_samples)
lower_bound <- sorted_means[ceiling(0.025 * length(sorted_means))]
upper_bound <- sorted_means[floor(0.975 * length(sorted_means))]
ci <- c(lower_bound, upper_bound)
return(ci)
}
# Step three for medians
ci_medians <- bootstrap_ci(means_method = sorted_resample_means)
# Print the sorted means
print(sorted_resample_means)
bootstrap_ci <- function(mean_method = NULL) {
sorted_means <- mean_method
#sorted_samples <- sort(bootstrap_samples)
lower_bound <- sorted_means[ceiling(0.025 * length(sorted_means))]
upper_bound <- sorted_means[floor(0.975 * length(sorted_means))]
ci <- c(lower_bound, upper_bound)
return(ci)
}
resample_medians <- numeric(1000)
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
resample_medians[i] <- median(sample_vec)
}
# Step 3: Sort the one thousand means
sorted_resample_medians <- sort(resample_medians)
# Step three for medians
ci_medians <- bootstrap_ci(means_method = sorted_resample_medians)
# Step three for medians
ci_medians <- bootstrap_ci(means_method = sorted_resample_medians)
# Step three for medians
ci_medians <- bootstrap_ci(mean_method = sorted_resample_medians)
ci_medians
## ########################################################################################
# Define the function with parameters for vector, confidence interval, resample size, seed, and sample size
analyze_vector <- function(vec, conf_interval = NULL, resample_size = NULL, set_seed = NULL, sample_size = NULL) {
if (!is.null(set_seed)) {
set.seed(set_seed)
}
if (is.null(resample_size)) {
resample_size <- length(vec)
}
#CI function
bootstrap_ci <- function(mean_method = NULL) {
sorted_means <- mean_method
#sorted_samples <- sort(bootstrap_samples)
lower_bound <- sorted_means[ceiling(0.025 * length(sorted_means))]
upper_bound <- sorted_means[floor(0.975 * length(sorted_means))]
ci <- c(lower_bound, upper_bound)
return(ci)
}
##################Arithmetic means####################
# Step one and two for means
#resample_means <- replicate(resample_size, {
#sample_vec <- sample(vec, sample_size, replace = TRUE)
#mean(sample_vec)
#})
# Initialize a vector to store the means
resample_means <- numeric(1000)
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
resample_means[i] <- mean(sample_vec)
}
# Step 3: Sort the one thousand means
sorted_resample_means <- sort(resample_means)
# Step three for means
ci_means <- bootstrap_ci(mean_method = sorted_resample_means)
###########################Medians####################
# Step one and two for medians
#resample_medians <- replicate(resample_size, {
#sample_vec <- sample(vec, sample_size, replace = TRUE)
#median(sample_vec)
#})
# Initialize a vector to store the means
resample_medians <- numeric(1000)
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
resample_medians[i] <- median(sample_vec)
}
# Step 3: Sort the one thousand means
sorted_resample_medians <- sort(resample_medians)
# Step three for medians
ci_medians <- bootstrap_ci(mean_method = sorted_resample_medians)
####################### Midranges ############################
# Step one and two for midranges
#resample_midranges <- replicate(resample_size, {
#sample_vec <- sample(vec, sample_size, replace = TRUE)
#(min(sample_vec) + max(sample_vec))/2
#})
# Initialize a vector to store the means
resample_midranges <- numeric(1000)
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
resample_midranges[i] <- (min(sample_vec) + max(sample_vec))/2
}
# Step 3: Sort the one thousand means
sorted_resample_midranges <- sort(resample_midranges)
# Step three for midranges
ci_midranges <- bootstrap_ci(mean_method = sorted_resample_midranges)
####################### Geometric Meanss ############################
# Step one and two for geometric_means
#resample_geomeans <- replicate(resample_size, {
#sample_vec <- sample(vec, sample_size, replace = TRUE)
##exp(mean(log(sample_vec)))
#pro(vec)^(1/length(vec))
#})
resample_geomeans <- numeric(1000)
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
resample_geomeans[i] <- (min(vec) + max(vec))/2
}
# Step 3: Sort the one thousand means
sorted_resample_geomeans <- sort(resample_geomeans)
# Step three foHarmonic.Mean(sample_vec)r geometric_means
ci_geomeans <- bootstrap_ci(mean_method = sorted_resample_geomeans)
################################ Harmonic Means ###################
# Step one and two for harmonic_means
#resample_harmeans <- replicate(resample_size, {
#sample_vec <- sample(vec, sample_size, replace = TRUE)
#length(sample_vec) / sum(1/sample_vec)
#})
resample_harmeans <- numeric(1000)
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
resample_harmeans[i] <- length(sample_vec) / sum(1/sample_vec)
}
# Step 3: Sort the one thousand means
sorted_resample_harmeans <- sort(resample_harmeans)
ci_harmeans <- bootstrap_ci(mean_method = sorted_resample_harmeans)
# ################ Quardratic Means #######################
# Step one and two for quadratic means
#resample_quadmeans <- replicate(resample_size, {
#sample_vec <- sample(vec, sample_size, replace = TRUE)
#(mean(sample_vec^2))^(1/2)
#})
resample_quadmeans <- numeric(1000)
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
resample_quadmeans[i] <- (mean(sample_vec^2))^(1/2)
}
# Step 3: Sort the one thousand means
sorted_resample_quadmeans <- sort(resample_quadmeans)
ci_quadmeans <- bootstrap_ci(mean_method = sorted_resample_quadmeans)
# ################ Cubic Means #######################
# Step one and two for cubicic means
#resample_cubmeans <- replicate(resample_size, {
#sample_vec <- sample(vec, sample_size, replace = TRUE)
#(mean(sample_vec^3))^(1/3)
#})
resample_cubmeans <- numeric(1000)
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
resample_cubmeans[i] <- (mean(sample_vec^3))^(1/3)
}
# Step 3: Sort the one thousand means
sorted_resample_cubmeans <- sort(resample_cubmeans)
ci_cubmeans <- bootstrap_ci(mean_method = sorted_resample_cubmeans)
# ################ quartic or biquadratic Means #######################
# Step one and two for cubicic means
#resample_biquadmeans <- replicate(resample_size, {
#sample_vec <- sample(vec, sample_size, replace = TRUE)
#(mean(sample_vec^4))^(1/4)
#})
resample_biquadmeans <- numeric(1000)
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
resample_biquadmeans[i] <- (mean(sample_vec^4))^(1/4)
}
# Step 3: Sort the one thousand means
sorted_resample_biquadmeans <- sort(resample_biquadmeans)
ci_biquadmeans <- bootstrap_ci(mean_method = sorted_resample_biquadmeans)
# Step five: Create a data frame with the results
results_df <- data.frame(
CI = c("mean", "median", "midranges", "geomeans", "harmeans", "quadmeans", "cubmeans", "biquadmeans"),
min_values = c(ci_means[1], ci_medians[1], ci_midranges[1], ci_geomeans[1], ci_harmeans[1], ci_quadmeans[1], ci_cubmeans[1], ci_biquadmeans[1]),
max_values = c(ci_means[2], ci_medians[2], ci_midranges[2], ci_geomeans[2], ci_harmeans[2], ci_quadmeans[2], ci_cubmeans[2], ci_biquadmeans[2])
)
return(results_df)
}
# Example usage:
vec <- c(1, 2, 3, 4, 5)
analyze_vector(vec, conf_interval = 0.95, resample_size = 1000, set_seed = 123, sample_size = length(vec))
# Initialize a vector to store the means
resample_means <- numeric(1000)
# Repeat steps 1 and 2 one thousand times
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
resample_means[i] <- (mean(sample_vec^4))^(1/4)
}
# Step 3: Sort the one thousand means
sorted_resample_means <- sort(resample_means)
# Print the sorted means
print(sorted_resample_means)
set.seed(123)
# Repeat steps 1 and 2 one thousand times
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
resample_means[i] <- (mean(sample_vec^4))^(1/4)
}
# Step 3: Sort the one thousand means
sorted_resample_means <- sort(resample_means)
# Print the sorted means
print(sorted_resample_means)
# Initialize a vector to store the means
resample_means <- numeric(1000)
set.seed(123)
# Repeat steps 1 and 2 one thousand times
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
resample_means[i] <- median(vec)
}
# Step 3: Sort the one thousand means
sorted_resample_means <- sort(resample_means)
# Print the sorted means
print(sorted_resample_means)
analyze_vector(vec, conf_interval = 0.95, resample_size = 1000, set_seed = 123, sample_size = length(vec))
# Initialize a vector to store the means
resample_means <- numeric(1000)
#set.seed(123)
# Repeat steps 1 and 2 one thousand times
for (i in 1:1000) {
# Step 1: Take a sample with replacement and equal probability
sample_vec <- sample(vec, length(vec), replace = TRUE, prob = rep(1/length(vec), length(vec)))
# Step 2: Obtain the mean of the sample
resample_means[i] <- median(vec)
}
# Step 3: Sort the one thousand means
sorted_resample_means <- sort(resample_means)
# Print the sorted means
print(sorted_resample_means)
setwd("C:/Users/economia/GitHubPhD/jamesdan_site")
quarto::quarto_render()
